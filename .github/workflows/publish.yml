name: publish

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: CommonEnv
    
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{secrets.PAT_TOKEN}}
    - name: Setup .NET Core SDK 3.1.x
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '3.1.x'
    - name: Restore .Net
      run: dotnet restore
    - name: Run tests
      run: dotnet test --verbosity normal
    - name: Configure version
      run: |
        git fetch --unshallow
        lastTag=$(git describe --tags --abbrev=0)
        lastTagMainVersion=$(sed -n 's/^\([0-9]*\.[0-9]*\).*/\1/p' <<<"$lastTag")
        currentVersion=$(cat VERSION)
        currentMainVersion=$(sed -n 's/^\([0-9]*\.[0-9]*\).*/\1/p' <VERSION)
        if [ "$lastTagMainVersion" = "$currentMainVersion" ]
        then
          echo "Version the same."
          lastTagBuildVersion=$(sed -n 's/^[0-9]*\.[0-9]*\.\([0-9]*\).*/\1/p' <<<"$lastTag")
          newBuildVersion=$((lastTagBuildVersion+1))
          newVersion="$lastTagMainVersion"."$newBuildVersion"
          echo "newVersion=$newVersion"
          echo "newVersion=$newVersion" >> $GITHUB_ENV
        else
          echo "New version!"
          newVersion="$currentMainVersion".1
          VersionPrefix=$newVersion
          echo "newVersion=$newVersion"
          echo "newVersion=$newVersion" >> $GITHUB_ENV
        fi
    - name: Build
      run: |
        sed -i "s/\(<Version>\)\(.*\)\(<\/Version>\)/\1${{env.newVersion}}\3/" UnityMVVM/UnityMVVM.csproj
        dotnet build UnityMVVM.sln --no-dependencies --output build
    - name: Publish package to GitHub
      if: github.ref == 'refs/heads/master'
      run: |
       dotnet nuget add source --username kekchpek --password ${{ secrets.PAT_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/kekchpek/index.json"
       dotnet nuget push build/*.nupkg --skip-duplicate --api-key ${{secrets.PAT_TOKEN}} --source github
    - name: Publish package to Nuget
      if: github.ref == 'refs/heads/master'
      run: |
       dotnet nuget push build/*.nupkg --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json
    - name: Zip build
      run: zip UnityMVVM.zip build/UnityMVVM.dll build/UnityMVVM.xml
    - name: Create Release
      if: github.ref == 'refs/heads/master'
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.newVersion }}
        name: Release ${{ env.newVersion }}
        artifacts: "build/*.nupkg, UnityAuxiliaryTools.zip"
        token: ${{ secrets.PAT_TOKEN }}
    - name: Expose as artifact
      uses: actions/upload-artifact@v2
      with:
       name: Build
       path: build

name: testDev

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: CommonEnv
    
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
    - name: NotRun
      if: github.ref == 'refs/heads/master'
      run: |
       echo "Not run"
    - name: Run
      run: |
       echo "Run"
        